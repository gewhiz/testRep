//Given inorder and postorder traversal of a tree, construct the binary tree.

//Note:
//You may assume that duplicates do not exist in the tree.

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int in;
    int pos;
    
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder.length == 0)
            return null;
        if(inorder.length != postorder.length)
            return null;
        in = inorder.length-1;
        pos = in;
        return build(inorder, postorder, null);
    }
    
    public TreeNode build(int[] inorder, int[] postorder, TreeNode n)
    {
        if(pos<0 || in <0)
            return null;
        TreeNode root = new TreeNode(postorder[pos]);
        pos--;
        if(inorder[in] != root.val)
        {
            root.right = build(inorder, postorder, root);
        }
        in--;
        if(n== null || (inorder[in] != n.val))
        {
            root.left = build(inorder, postorder, n);
        }
        return root;
    }
}
